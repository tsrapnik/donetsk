#version 450

const uint glyph_layouts_size = 128;
const float advance = 0.075;

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct GlyphLayout {
    vec2 origin;
    vec2 size;
    vec2 offset;
    float advance;
};

struct TextVertex {
    vec2 position;
    vec2 texture_coordinates;
};

layout(set = 0, binding = 0) uniform GlyphBuffer {
    GlyphLayout glyph_layouts[glyph_layouts_size];
};

layout(set = 0, binding = 1) buffer Output {
    TextVertex text_vertex_buffer[];
};

layout(set = 0, binding = 2) buffer IndirectDrawArgs {
    uint vertices;
    uint unused0;
    uint unused1;
    uint unused2;
};

void main() {
    // if index is not in glyp_layouts table, just map it to its last element to avoid reading out of bounds (last element is delete and won't get rendered).
    uint glyph_index = min(gl_GlobalInvocationID.x + 97, glyph_layouts_size - 1);

    uint offset = atomicAdd(vertices, 6);

    vec3 size = vec3(glyph_layouts[glyph_index].size, 0.0);
    vec2 texture_origin = glyph_layouts[glyph_index].origin;
    text_vertex_buffer[offset + 0].texture_coordinates = texture_origin + size.zz;
    text_vertex_buffer[offset + 1].texture_coordinates = texture_origin + size.xz;
    text_vertex_buffer[offset + 2].texture_coordinates = texture_origin + size.zy;
    text_vertex_buffer[offset + 3].texture_coordinates = texture_origin + size.xz;
    text_vertex_buffer[offset + 4].texture_coordinates = texture_origin + size.zy;
    text_vertex_buffer[offset + 5].texture_coordinates = texture_origin + size.xy;

    vec2 render_origin = 3.0 * (glyph_layouts[glyph_index].offset + vec2(float(gl_GlobalInvocationID.x) * advance, 0.0)) + vec2(-1.0, 0.0);
    text_vertex_buffer[offset + 0].position = render_origin + 3.0 * size.zz;
    text_vertex_buffer[offset + 1].position = render_origin + 3.0 * size.xz;
    text_vertex_buffer[offset + 2].position = render_origin + 3.0 * size.zy;
    text_vertex_buffer[offset + 3].position = render_origin + 3.0 * size.xz;
    text_vertex_buffer[offset + 4].position = render_origin + 3.0 * size.zy;
    text_vertex_buffer[offset + 5].position = render_origin + 3.0 * size.xy;
}