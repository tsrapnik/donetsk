#version 450

const uint glyph_layouts_size = 128;
const uint max_glyph_count = 100 * 100; //todo: don't have two definitions of max_glyph_count.

layout(local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct TextCharacter {
    uint character;
    float scale;
    vec2 position;
    vec3 color;
};

struct GlyphLayout {
    vec2 origin;
    vec2 size;
    vec2 offset;
    float advance;
};

struct TextVertex {
    vec2 render_position;
    vec2 glyph_position;
    vec3 color;
};

layout(set = 0, binding = 0) uniform CharacterBuffer {
    TextCharacter text_character_buffer[max_glyph_count];
};

layout(set = 0, binding = 1) uniform GlyphBuffer {
    GlyphLayout glyph_layouts[glyph_layouts_size];
};

layout(set = 0, binding = 2) buffer Output {
    TextVertex text_vertex_buffer[max_glyph_count * 6];
};

layout(set = 0, binding = 3) buffer IndirectDrawArgs {
    uint vertices;
    uint unused0;
    uint unused1;
    uint unused2;
};

void main() {
    uint vertex_index = atomicAdd(vertices, 6);

    //if index is not in glyp_layouts table, just map it to its last element to avoid reading out of bounds (last element is delete and won't get rendered).
    uint glyph_index = min(text_character_buffer[gl_GlobalInvocationID.x].character, glyph_layouts_size - 1);

    float scale = text_character_buffer[gl_GlobalInvocationID.x].scale;
    vec2 position = text_character_buffer[gl_GlobalInvocationID.x].position;
    vec3 color = text_character_buffer[gl_GlobalInvocationID.x].color;

    //store size in vec3 with z being 0.0, so we can use swizzling to add or not add size components to the origin vec2.
    vec3 glyph_size = vec3(glyph_layouts[glyph_index].size, 0.0);
    vec2 glyph_origin = glyph_layouts[glyph_index].origin;
    text_vertex_buffer[vertex_index + 0].glyph_position = glyph_origin + glyph_size.zz;
    text_vertex_buffer[vertex_index + 1].glyph_position = glyph_origin + glyph_size.xz;
    text_vertex_buffer[vertex_index + 2].glyph_position = glyph_origin + glyph_size.zy;
    text_vertex_buffer[vertex_index + 3].glyph_position = glyph_origin + glyph_size.xz;
    text_vertex_buffer[vertex_index + 4].glyph_position = glyph_origin + glyph_size.zy;
    text_vertex_buffer[vertex_index + 5].glyph_position = glyph_origin + glyph_size.xy;

    vec3 render_size = glyph_size * scale;
    vec2 render_origin = position + glyph_layouts[glyph_index].offset;
    text_vertex_buffer[vertex_index + 0].render_position = render_origin + render_size.zz;
    text_vertex_buffer[vertex_index + 1].render_position = render_origin + render_size.xz;
    text_vertex_buffer[vertex_index + 2].render_position = render_origin + render_size.zy;
    text_vertex_buffer[vertex_index + 3].render_position = render_origin + render_size.xz;
    text_vertex_buffer[vertex_index + 4].render_position = render_origin + render_size.zy;
    text_vertex_buffer[vertex_index + 5].render_position = render_origin + render_size.xy;

    text_vertex_buffer[vertex_index + 0].color = color;
    text_vertex_buffer[vertex_index + 1].color = color;
    text_vertex_buffer[vertex_index + 2].color = color;
    text_vertex_buffer[vertex_index + 3].color = color;
    text_vertex_buffer[vertex_index + 4].color = color;
    text_vertex_buffer[vertex_index + 5].color = color;
}